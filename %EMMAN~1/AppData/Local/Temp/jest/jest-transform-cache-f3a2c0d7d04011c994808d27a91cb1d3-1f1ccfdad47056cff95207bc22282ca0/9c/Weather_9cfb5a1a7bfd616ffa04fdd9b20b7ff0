a0aca3982da6dcdcb17afaae2335b677
"use strict";

var _interopRequireDefault = require("C:\\Users\\Otomfon\\Desktop\\weather-metrics\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = weatherReducer;
exports.getData = exports.fetchData = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _uuid = require("uuid");

var _jsxFileName = "C:\\Users\\Otomfon\\Desktop\\weather-metrics\\src\\Redux\\Weather.js";
const GET_DATA = 'weather-app/weatherReducer/getData';

const getData = payload => ({
  type: GET_DATA,
  payload
});

exports.getData = getData;

const fetchData = location => async dispatch => {
  try {
    const coodUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&i&appid=f1354fda8bec32646187c58f25f48372`;
    const responseCord = await _axios.default.get(coodUrl);
    const _responseCord$data$co = responseCord.data.coord,
          lon = _responseCord$data$co.lon,
          lat = _responseCord$data$co.lat;
    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly&appid=f1354fda8bec32646187c58f25f48372`;
    const response = await _axios.default.get(url);
    const data = await response.data;
    const weatherData = [];
    const obj = data;
    const objDaily = obj.daily;
    const daily = [];
    objDaily.forEach(el => {
      daily.push({
        min: el.temp.min,
        max: el.temp.max,
        id: (0, _uuid.v4)(),
        dt: el.dt,
        main: el.weather[0].main,
        desc: el.weather[0].description,
        icon: el.weather[0].icon
      });
    });
    const _obj$current = obj.current,
          dt = _obj$current.dt,
          temp = _obj$current.temp,
          humidity = _obj$current.humidity,
          wind_speed = _obj$current.wind_speed,
          sunrise = _obj$current.sunrise,
          sunset = _obj$current.sunset;
    const _obj$current$weather$ = obj.current.weather[0],
          description = _obj$current$weather$.description,
          icon = _obj$current$weather$.icon;
    const timezone_offset = obj.timezone_offset;
    weatherData.dt = dt;
    weatherData.temp = temp;
    weatherData.humidity = humidity;
    weatherData.windSpeed = wind_speed;
    weatherData.sunrise = sunrise;
    weatherData.sunset = sunset;
    weatherData.daily = daily;
    weatherData.desc = description;
    weatherData.icon = icon;
    weatherData.timezone = timezone_offset;
    dispatch(getData(weatherData));
  } catch (error) {
    /*#__PURE__*/
    React.createElement("h2", {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 57,
        columnNumber: 5
      }
    }, "error");
  }
};

exports.fetchData = fetchData;

function weatherReducer(state = [], action) {
  switch (action.type) {
    case GET_DATA:
      return action.payload;

    default:
      return state;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVRfREFUQSIsImdldERhdGEiLCJwYXlsb2FkIiwidHlwZSIsImZldGNoRGF0YSIsImxvY2F0aW9uIiwiZGlzcGF0Y2giLCJjb29kVXJsIiwicmVzcG9uc2VDb3JkIiwiYXhpb3MiLCJnZXQiLCJkYXRhIiwiY29vcmQiLCJsb24iLCJsYXQiLCJ1cmwiLCJyZXNwb25zZSIsIndlYXRoZXJEYXRhIiwib2JqIiwib2JqRGFpbHkiLCJkYWlseSIsImZvckVhY2giLCJlbCIsInB1c2giLCJtaW4iLCJ0ZW1wIiwibWF4IiwiaWQiLCJ1dWlkdjQiLCJkdCIsIm1haW4iLCJ3ZWF0aGVyIiwiZGVzYyIsImRlc2NyaXB0aW9uIiwiaWNvbiIsImN1cnJlbnQiLCJodW1pZGl0eSIsIndpbmRfc3BlZWQiLCJzdW5yaXNlIiwic3Vuc2V0IiwidGltZXpvbmVfb2Zmc2V0Iiwid2luZFNwZWVkIiwidGltZXpvbmUiLCJlcnJvciIsIndlYXRoZXJSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iXSwic291cmNlcyI6WyJXZWF0aGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuXG5jb25zdCBHRVRfREFUQSA9ICd3ZWF0aGVyLWFwcC93ZWF0aGVyUmVkdWNlci9nZXREYXRhJztcblxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSAocGF5bG9hZCkgPT4gKHtcbiAgdHlwZTogR0VUX0RBVEEsXG4gIHBheWxvYWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IGZldGNoRGF0YSA9IChsb2NhdGlvbikgPT4gYXN5bmMgKGRpc3BhdGNoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY29vZFVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7bG9jYXRpb259JmkmYXBwaWQ9ZjEzNTRmZGE4YmVjMzI2NDYxODdjNThmMjVmNDgzNzJgO1xuICAgIGNvbnN0IHJlc3BvbnNlQ29yZCA9IGF3YWl0IGF4aW9zLmdldChjb29kVXJsKTtcbiAgICBjb25zdCB7IGxvbiwgbGF0IH0gPSByZXNwb25zZUNvcmQuZGF0YS5jb29yZDtcbiAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L29uZWNhbGw/bGF0PSR7bGF0fSZsb249JHtsb259JmV4Y2x1ZGU9aG91cmx5JmFwcGlkPWYxMzU0ZmRhOGJlYzMyNjQ2MTg3YzU4ZjI1ZjQ4MzcyYDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5kYXRhO1xuICAgIGNvbnN0IHdlYXRoZXJEYXRhID0gW107XG4gICAgY29uc3Qgb2JqID0gZGF0YTtcbiAgICBjb25zdCBvYmpEYWlseSA9IG9iai5kYWlseTtcbiAgICBjb25zdCBkYWlseSA9IFtdO1xuXG4gICAgb2JqRGFpbHkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGRhaWx5LnB1c2goe1xuICAgICAgICBtaW46IGVsLnRlbXAubWluLFxuICAgICAgICBtYXg6IGVsLnRlbXAubWF4LFxuICAgICAgICBpZDogdXVpZHY0KCksXG4gICAgICAgIGR0OiBlbC5kdCxcbiAgICAgICAgbWFpbjogZWwud2VhdGhlclswXS5tYWluLFxuICAgICAgICBkZXNjOiBlbC53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLFxuICAgICAgICBpY29uOiBlbC53ZWF0aGVyWzBdLmljb24sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGR0LCB0ZW1wLCBodW1pZGl0eSwgd2luZF9zcGVlZCwgc3VucmlzZSwgc3Vuc2V0LFxuICAgIH0gPSBvYmouY3VycmVudDtcblxuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIGljb24gfSA9IG9iai5jdXJyZW50LndlYXRoZXJbMF07XG4gICAgY29uc3QgeyB0aW1lem9uZV9vZmZzZXQgfSA9IG9iajtcblxuICAgIHdlYXRoZXJEYXRhLmR0ID0gZHQ7XG4gICAgd2VhdGhlckRhdGEudGVtcCA9IHRlbXA7XG4gICAgd2VhdGhlckRhdGEuaHVtaWRpdHkgPSBodW1pZGl0eTtcbiAgICB3ZWF0aGVyRGF0YS53aW5kU3BlZWQgPSB3aW5kX3NwZWVkO1xuICAgIHdlYXRoZXJEYXRhLnN1bnJpc2UgPSBzdW5yaXNlO1xuICAgIHdlYXRoZXJEYXRhLnN1bnNldCA9IHN1bnNldDtcbiAgICB3ZWF0aGVyRGF0YS5kYWlseSA9IGRhaWx5O1xuICAgIHdlYXRoZXJEYXRhLmRlc2MgPSBkZXNjcmlwdGlvbjtcbiAgICB3ZWF0aGVyRGF0YS5pY29uID0gaWNvbjtcblxuICAgIHdlYXRoZXJEYXRhLnRpbWV6b25lID0gdGltZXpvbmVfb2Zmc2V0O1xuICAgIGRpc3BhdGNoKGdldERhdGEod2VhdGhlckRhdGEpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICA8aDI+ZXJyb3I8L2gyPjtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2VhdGhlclJlZHVjZXIoc3RhdGUgPSBbXSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEdFVF9EQVRBOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBOztBQUNBOzs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsb0NBQWpCOztBQUVPLE1BQU1DLE9BQU8sR0FBSUMsT0FBRCxLQUFjO0VBQ25DQyxJQUFJLEVBQUVILFFBRDZCO0VBRW5DRTtBQUZtQyxDQUFkLENBQWhCOzs7O0FBS0EsTUFBTUUsU0FBUyxHQUFJQyxRQUFELElBQWMsTUFBT0MsUUFBUCxJQUFvQjtFQUN6RCxJQUFJO0lBQ0YsTUFBTUMsT0FBTyxH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