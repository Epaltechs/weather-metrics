f516984b0f15f014ca12b76015f45642
"use strict";

var _Weather = _interopRequireWildcard(require("../Redux/Weather"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const action = payload => ({
  type: 'GET_DATA',
  payload
});

describe('Should test weather reducer', () => {
  it('Should return an array on api call', async () => {
    const data1 = await _Weather.fetchData;
    expect(data1.length).toBeGreaterThan(0);
  });
  it('Should return an array on api call', () => {
    expect((0, _Weather.getData)(action.payload)).toBeInstanceOf(Object);
  });
  it('Should return an array when fetch tasks in task reducer is called', () => {
    expect((0, _Weather.default)([], action)).toBeInstanceOf(Array);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhY3Rpb24iLCJwYXlsb2FkIiwidHlwZSIsImRlc2NyaWJlIiwiaXQiLCJkYXRhMSIsImZldGNoRGF0YSIsImV4cGVjdCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsImdldERhdGEiLCJ0b0JlSW5zdGFuY2VPZiIsIk9iamVjdCIsIndlYXRoZXJSZWR1Y2VyIiwiQXJyYXkiXSwic291cmNlcyI6WyJXZWF0aGVyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdlYXRoZXJSZWR1Y2VyLCB7IGZldGNoRGF0YSwgZ2V0RGF0YSB9IGZyb20gJy4uL1JlZHV4L1dlYXRoZXInO1xuXG5jb25zdCBhY3Rpb24gPSAocGF5bG9hZCkgPT4gKHtcbiAgdHlwZTogJ0dFVF9EQVRBJyxcbiAgcGF5bG9hZCxcbn0pO1xuXG5kZXNjcmliZSgnU2hvdWxkIHRlc3Qgd2VhdGhlciByZWR1Y2VyJywgKCkgPT4ge1xuICBpdCgnU2hvdWxkIHJldHVybiBhbiBhcnJheSBvbiBhcGkgY2FsbCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhMSA9IGF3YWl0IGZldGNoRGF0YTtcbiAgICBleHBlY3QoZGF0YTEubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gIH0pO1xuXG4gIGl0KCdTaG91bGQgcmV0dXJuIGFuIGFycmF5IG9uIGFwaSBjYWxsJywgKCkgPT4ge1xuICAgIGV4cGVjdChnZXREYXRhKGFjdGlvbi5wYXlsb2FkKSkudG9CZUluc3RhbmNlT2YoT2JqZWN0KTtcbiAgfSk7XG4gIGl0KCdTaG91bGQgcmV0dXJuIGFuIGFycmF5IHdoZW4gZmV0Y2ggdGFza3MgaW4gdGFzayByZWR1Y2VyIGlzIGNhbGxlZCcsICgpID0+IHtcbiAgICBleHBlY3Qod2VhdGhlclJlZHVjZXIoW10sIGFjdGlvbikpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFJQyxPQUFELEtBQWM7RUFDM0JDLElBQUksRUFBRSxVQURxQjtFQUUzQkQ7QUFGMkIsQ0FBZCxDQUFmOztBQUtBRSxRQUFRLENBQUMsNkJBQUQsRUFBZ0MsTUFBTTtFQUM1Q0MsRUFBRSxDQUFDLG9DQUFELEVBQXVDLFlBQVk7SUFDbkQsTUFBTUMsS0FBSyxHQUFHLE1BQU1DLGtCQUFwQjtJQUNBQyxNQUFNLENBQUNGLEtBQUssQ0FBQ0csTUFBUCxDQUFOLENBQXFCQyxlQUFyQixDQUFxQyxDQUFyQztFQUNELENBSEMsQ0FBRjtFQUtBTCxFQUFFLENBQUMsb0NBQUQsRUFBdUMsTUFBTTtJQUM3Q0csTUFBTSxDQUFDLElBQUFHLGdCQUFBLEVBQVFWLE1BQU0sQ0FBQ0MsT0FBZixDQUFELENBQU4sQ0FBZ0NVLGNBQWhDLENBQStDQyxNQUEvQztFQUNELENBRkMsQ0FBRjtFQUdBUixFQUFFLENBQUMsbUVBQUQsRUFBc0UsTUFBTTtJQUM1RUcsTUFBTSxDQUFDLElBQUFNLGdCQUFBLEVBQWUsRUFBZixFQUFtQmIsTUFBbkIsQ0FBRCxDQUFOLENBQW1DVyxjQUFuQyxDQUFrREcsS0FBbEQ7RUFDRCxDQUZDLENBQUY7QUFHRCxDQVpPLENBQVIifQ==