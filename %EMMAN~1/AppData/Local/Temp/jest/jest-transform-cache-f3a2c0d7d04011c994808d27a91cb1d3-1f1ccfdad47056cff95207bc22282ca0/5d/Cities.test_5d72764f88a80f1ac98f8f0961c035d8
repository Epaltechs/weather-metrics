92a1a7e6ebf646c2f37c233e30840e04
"use strict";

var _Cities = _interopRequireWildcard(require("../Redux/Cities"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const action = payload => ({
  type: 'GET_CITY',
  payload
});

describe('Should test weather reducer', () => {
  it('Should return an array on api call', async () => {
    const data1 = await _Cities.fetchCity;
    expect(data1.length).toBe(0);
  });
  it('Should return an array on api call', () => {
    expect((0, _Cities.getCities)(action.payload)).toBeInstanceOf(Object);
  });
  it('Should return an array when fetch tasks in task reducer is called', () => {
    expect((0, _Cities.default)([], action)).toBeInstanceOf(Array);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhY3Rpb24iLCJwYXlsb2FkIiwidHlwZSIsImRlc2NyaWJlIiwiaXQiLCJkYXRhMSIsImZldGNoQ2l0eSIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJnZXRDaXRpZXMiLCJ0b0JlSW5zdGFuY2VPZiIsIk9iamVjdCIsImNpdHlSZWR1Y2VyIiwiQXJyYXkiXSwic291cmNlcyI6WyJDaXRpZXMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2l0eVJlZHVjZXIsIHsgZmV0Y2hDaXR5LCBnZXRDaXRpZXMgfSBmcm9tICcuLi9SZWR1eC9DaXRpZXMnO1xuXG5jb25zdCBhY3Rpb24gPSAocGF5bG9hZCkgPT4gKHtcbiAgdHlwZTogJ0dFVF9DSVRZJyxcbiAgcGF5bG9hZCxcbn0pO1xuXG5kZXNjcmliZSgnU2hvdWxkIHRlc3Qgd2VhdGhlciByZWR1Y2VyJywgKCkgPT4ge1xuICBpdCgnU2hvdWxkIHJldHVybiBhbiBhcnJheSBvbiBhcGkgY2FsbCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhMSA9IGF3YWl0IGZldGNoQ2l0eTtcbiAgICBleHBlY3QoZGF0YTEubGVuZ3RoKS50b0JlKDApO1xuICB9KTtcblxuICBpdCgnU2hvdWxkIHJldHVybiBhbiBhcnJheSBvbiBhcGkgY2FsbCcsICgpID0+IHtcbiAgICBleHBlY3QoZ2V0Q2l0aWVzKGFjdGlvbi5wYXlsb2FkKSkudG9CZUluc3RhbmNlT2YoT2JqZWN0KTtcbiAgfSk7XG4gIGl0KCdTaG91bGQgcmV0dXJuIGFuIGFycmF5IHdoZW4gZmV0Y2ggdGFza3MgaW4gdGFzayByZWR1Y2VyIGlzIGNhbGxlZCcsICgpID0+IHtcbiAgICBleHBlY3QoY2l0eVJlZHVjZXIoW10sIGFjdGlvbikpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFJQyxPQUFELEtBQWM7RUFDM0JDLElBQUksRUFBRSxVQURxQjtFQUUzQkQ7QUFGMkIsQ0FBZCxDQUFmOztBQUtBRSxRQUFRLENBQUMsNkJBQUQsRUFBZ0MsTUFBTTtFQUM1Q0MsRUFBRSxDQUFDLG9DQUFELEVBQXVDLFlBQVk7SUFDbkQsTUFBTUMsS0FBSyxHQUFHLE1BQU1DLGlCQUFwQjtJQUNBQyxNQUFNLENBQUNGLEtBQUssQ0FBQ0csTUFBUCxDQUFOLENBQXFCQyxJQUFyQixDQUEwQixDQUExQjtFQUNELENBSEMsQ0FBRjtFQUtBTCxFQUFFLENBQUMsb0NBQUQsRUFBdUMsTUFBTTtJQUM3Q0csTUFBTSxDQUFDLElBQUFHLGlCQUFBLEVBQVVWLE1BQU0sQ0FBQ0MsT0FBakIsQ0FBRCxDQUFOLENBQWtDVSxjQUFsQyxDQUFpREMsTUFBakQ7RUFDRCxDQUZDLENBQUY7RUFHQVIsRUFBRSxDQUFDLG1FQUFELEVBQXNFLE1BQU07SUFDNUVHLE1BQU0sQ0FBQyxJQUFBTSxlQUFBLEVBQVksRUFBWixFQUFnQmIsTUFBaEIsQ0FBRCxDQUFOLENBQWdDVyxjQUFoQyxDQUErQ0csS0FBL0M7RUFDRCxDQUZDLENBQUY7QUFHRCxDQVpPLENBQVIifQ==