8c9ea781a184d030a67349589f09ac36
"use strict";

var _interopRequireDefault = require("C:/Users/Otomfon/Desktop/weather-metrics/node_modules/@babel/runtime/helpers/interopRequireDefault.js").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = weatherReducer;
exports.getData = exports.fetchData = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _uuid = require("uuid");

var _jsxDevRuntime = require("react/jsx-dev-runtime");

var _jsxFileName = "C:\\Users\\Otomfon\\Desktop\\weather-metrics\\src\\Redux\\weather.js";
const GET_DATA = 'weather-app/weatherReducer/getData';

const getData = payload => ({
  type: GET_DATA,
  payload
});

exports.getData = getData;

const fetchData = location => async dispatch => {
  try {
    const coodUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&i&appid=f1354fda8bec32646187c58f25f48372`;
    const responseCord = await _axios.default.get(coodUrl);
    const {
      lon,
      lat
    } = responseCord.data.coord;
    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly&appid=f1354fda8bec32646187c58f25f48372`;
    const response = await _axios.default.get(url);
    const data = await response.data;
    const weatherData = [];
    const obj = data;
    const objDaily = obj.daily;
    const daily = [];
    objDaily.forEach(el => {
      daily.push({
        min: el.temp.min,
        max: el.temp.max,
        id: (0, _uuid.v4)(),
        dt: el.dt,
        main: el.weather[0].main,
        desc: el.weather[0].description,
        icon: el.weather[0].icon
      });
    });
    const {
      dt,
      temp,
      humidity,
      wind_speed,
      sunrise,
      sunset
    } = obj.current;
    const {
      description,
      icon
    } = obj.current.weather[0];
    const {
      timezone_offset
    } = obj;
    weatherData.dt = dt;
    weatherData.temp = temp;
    weatherData.humidity = humidity;
    weatherData.windSpeed = wind_speed;
    weatherData.sunrise = sunrise;
    weatherData.sunset = sunset;
    weatherData.daily = daily;
    weatherData.desc = description;
    weatherData.icon = icon;
    weatherData.timezone = timezone_offset;
    dispatch(getData(weatherData));
  } catch (error) {
    /*#__PURE__*/
    (0, _jsxDevRuntime.jsxDEV)("h2", {
      children: "error"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 57,
      columnNumber: 5
    }, void 0);
  }
};

exports.fetchData = fetchData;

function weatherReducer(state = [], action) {
  switch (action.type) {
    case GET_DATA:
      return action.payload;

    default:
      return state;
  }
} // API url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=imperial&appid=f1354fda8bec32646187c58f25f48372`;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVRfREFUQSIsImdldERhdGEiLCJwYXlsb2FkIiwidHlwZSIsImZldGNoRGF0YSIsImxvY2F0aW9uIiwiZGlzcGF0Y2giLCJjb29kVXJsIiwicmVzcG9uc2VDb3JkIiwiYXhpb3MiLCJnZXQiLCJsb24iLCJsYXQiLCJkYXRhIiwiY29vcmQiLCJ1cmwiLCJyZXNwb25zZSIsIndlYXRoZXJEYXRhIiwib2JqIiwib2JqRGFpbHkiLCJkYWlseSIsImZvckVhY2giLCJlbCIsInB1c2giLCJtaW4iLCJ0ZW1wIiwibWF4IiwiaWQiLCJ1dWlkdjQiLCJkdCIsIm1haW4iLCJ3ZWF0aGVyIiwiZGVzYyIsImRlc2NyaXB0aW9uIiwiaWNvbiIsImh1bWlkaXR5Iiwid2luZF9zcGVlZCIsInN1bnJpc2UiLCJzdW5zZXQiLCJjdXJyZW50IiwidGltZXpvbmVfb2Zmc2V0Iiwid2luZFNwZWVkIiwidGltZXpvbmUiLCJlcnJvciIsIndlYXRoZXJSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iXSwic291cmNlcyI6WyJ3ZWF0aGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcclxuXHJcbmNvbnN0IEdFVF9EQVRBID0gJ3dlYXRoZXItYXBwL3dlYXRoZXJSZWR1Y2VyL2dldERhdGEnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSAocGF5bG9hZCkgPT4gKHtcclxuICB0eXBlOiBHRVRfREFUQSxcclxuICBwYXlsb2FkLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaERhdGEgPSAobG9jYXRpb24pID0+IGFzeW5jIChkaXNwYXRjaCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjb29kVXJsID0gYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP3E9JHtsb2NhdGlvbn0maSZhcHBpZD1mMTM1NGZkYThiZWMzMjY0NjE4N2M1OGYyNWY0ODM3MmA7XHJcbiAgICBjb25zdCByZXNwb25zZUNvcmQgPSBhd2FpdCBheGlvcy5nZXQoY29vZFVybCk7XHJcbiAgICBjb25zdCB7IGxvbiwgbGF0IH0gPSByZXNwb25zZUNvcmQuZGF0YS5jb29yZDtcclxuICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvb25lY2FsbD9sYXQ9JHtsYXR9Jmxvbj0ke2xvbn0mZXhjbHVkZT1ob3VybHkmYXBwaWQ9ZjEzNTRmZGE4YmVjMzI2NDYxODdjNThmMjVmNDgzNzJgO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5kYXRhO1xyXG4gICAgY29uc3Qgd2VhdGhlckRhdGEgPSBbXTtcclxuICAgIGNvbnN0IG9iaiA9IGRhdGE7XHJcbiAgICBjb25zdCBvYmpEYWlseSA9IG9iai5kYWlseTtcclxuICAgIGNvbnN0IGRhaWx5ID0gW107XHJcblxyXG4gICAgb2JqRGFpbHkuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgZGFpbHkucHVzaCh7XHJcbiAgICAgICAgbWluOiBlbC50ZW1wLm1pbixcclxuICAgICAgICBtYXg6IGVsLnRlbXAubWF4LFxyXG4gICAgICAgIGlkOiB1dWlkdjQoKSxcclxuICAgICAgICBkdDogZWwuZHQsXHJcbiAgICAgICAgbWFpbjogZWwud2VhdGhlclswXS5tYWluLFxyXG4gICAgICAgIGRlc2M6IGVsLndlYXRoZXJbMF0uZGVzY3JpcHRpb24sXHJcbiAgICAgICAgaWNvbjogZWwud2VhdGhlclswXS5pY29uLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgZHQsIHRlbXAsIGh1bWlkaXR5LCB3aW5kX3NwZWVkLCBzdW5yaXNlLCBzdW5zZXQsXHJcbiAgICB9ID0gb2JqLmN1cnJlbnQ7XHJcblxyXG4gICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgaWNvbiB9ID0gb2JqLmN1cnJlbnQud2VhdGhlclswXTtcclxuICAgIGNvbnN0IHsgdGltZXpvbmVfb2Zmc2V0IH0gPSBvYmo7XHJcblxyXG4gICAgd2VhdGhlckRhdGEuZHQgPSBkdDtcclxuICAgIHdlYXRoZXJEYXRhLnRlbXAgPSB0ZW1wO1xyXG4gICAgd2VhdGhlckRhdGEuaHVtaWRpdHkgPSBodW1pZGl0eTtcclxuICAgIHdlYXRoZXJEYXRhLndpbmRTcGVlZCA9IHdpbmRfc3BlZWQ7XHJcbiAgICB3ZWF0aGVyRGF0YS5zdW5yaXNlID0gc3VucmlzZTtcclxuICAgIHdlYXRoZXJEYXRhLnN1bnNldCA9IHN1bnNldDtcclxuICAgIHdlYXRoZXJEYXRhLmRhaWx5ID0gZGFpbHk7XHJcbiAgICB3ZWF0aGVyRGF0YS5kZXNjID0gZGVzY3JpcHRpb247XHJcbiAgICB3ZWF0aGVyRGF0YS5pY29uID0gaWNvbjtcclxuXHJcbiAgICB3ZWF0aGVyRGF0YS50aW1lem9uZSA9IHRpbWV6b25lX29mZnNldDtcclxuICAgIGRpc3BhdGNoKGdldERhdGEod2VhdGhlckRhdGEpKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgPGgyPmVycm9yPC9oMj47XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2VhdGhlclJlZHVjZXIoc3RhdGUgPSBbXSwgYWN0aW9uKSB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBHRVRfREFUQTpcclxuICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQVBJIHVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7bG9jYXRpb259JnVuaXRzPWltcGVy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